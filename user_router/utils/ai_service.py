import os
import google.generativeai as genai
from google import genai as text_genai
from google.genai import types
from google.ai.generativelanguage_v1beta.types import content
from pathlib import Path
import json

from config import Settings
from database.db import get_user_language
from user_router.utils.service import show_progress, sync_show_progress

settings = Settings()

photo_analys_text = """
–¢—ã ‚Äî –≤—ã—Å–æ–∫–æ–∫–≤–∞–ª–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –º–æ–¥–µ–ª—å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∏–≥–æ–¥–Ω–æ—Å—Ç–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –ª–∏—Ü–∞ –∫ –∞–Ω–∞–ª–∏–∑—É —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–æ–∂–∏. –û—Ü–µ–Ω–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ –ø—è—Ç–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º:

1. –û—Å–≤–µ—â—ë–Ω–Ω–æ—Å—Ç—å

   * –ù–µ—Ç –ø–µ—Ä–µ- –∏–ª–∏ –Ω–µ–¥–æ—ç–∫—Å–ø–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –æ–±–ª–∞—Å—Ç–µ–π
   * –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –±–ª–∏–∫–∏ –∏ –≥–ª—É–±–æ–∫–∏–µ —Ç–µ–Ω–∏

2. –†–µ–∑–∫–æ—Å—Ç—å

   * –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ —Ñ–æ–∫—É—Å–µ (Laplacian Variance –≤—ã—à–µ –ø–æ—Ä–æ–≥–∞)

3. –ü–æ–ª–æ–∂–µ–Ω–∏–µ –ª–∏—Ü–∞

   * –õ–∏—Ü–æ –∑–∞–Ω–∏–º–∞–µ—Ç –æ—Ç 65% –∫–∞–¥—Ä–∞
   * –†–∞–∫—É—Ä—Å —Ñ—Ä–æ–Ω—Ç–∞–ª—å–Ω—ã–π, –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –Ω–µ –±–æ–ª–µ–µ 15 ¬∞

4. –û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –∫–æ—Å–º–µ—Ç–∏–∫–∏ –∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤

   * –ù–µ—Ç —è–≤–Ω—ã—Ö —Ç–æ–Ω–∞–ª—å–Ω—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π, –ø–æ—Å—Ç–æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–ª–∏ –Ω–∞–ª–æ–∂–µ–Ω–Ω—ã—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤

5. –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ –∏ –∫–∞—á–µ—Å—Ç–≤–æ

   * –ú–∏–Ω–∏–º—É–º 640√ó640 px
   * –û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ —Å–∏–ª—å–Ω—ã—Ö –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤ —Å–∂–∞—Ç–∏—è

–ï—Å–ª–∏ –Ω–µ –º–µ–Ω–µ–µ —á–µ—Ç—ã—Ä—ë—Ö –∏–∑ –ø—è—Ç–∏ –∫—Ä–∏—Ç–µ—Ä–∏–µ–≤ —Å–æ–±–ª—é–¥–µ–Ω—ã, –º–æ–¥–µ–ª—å –æ—Ç–≤–µ—á–∞–µ—Ç `true`, –∏–Ω–∞—á–µ ‚Äî `false`. –û—Ç–≤–µ—á–∞–π –∏—Å–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ –æ–¥–Ω–∏–º —Å–ª–æ–≤–æ–º: `true` –∏–ª–∏ `false`.
"""

def analysis_image(image_path: str):
    genai.configure(api_key=settings.GENAI_TOKEN)
    generation_config = {
        "temperature": 1,
        "top_p": 0.95,
        "top_k": 40,
        "max_output_tokens": 8192,
        "response_schema": content.Schema(
            type = content.Type.OBJECT,
            properties = {
            "face": content.Schema(
                type = content.Type.BOOLEAN,
            ),
            },
        ),
        "response_mime_type": "application/json",
    }

    model = genai.GenerativeModel(
    model_name="gemini-1.5-flash",
    generation_config=generation_config,
    system_instruction=photo_analys_text,
    )

    # –ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    image_path = f"{image_path}"
    image_data = {
        'mime_type': 'image/jpeg',
        'data': Path(image_path).read_bytes()
    }
    # chat_session = model.start_chat(
    #   history=[
    #   ]
    # )

    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º
    response = model.generate_content(
        contents={
            'parts': [
                image_data
            ]
        }
    )

    print(response.text)
    return json.loads(response.text)

summary_report_text = """
–¢—ã ‚Äî –≤—ã—Å–æ–∫–æ–∫–≤–∞–ª–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –º–æ–¥–µ–ª—å-—Ä–µ–¥–∞–∫—Ç–æ—Ä –æ—Ç—á—ë—Ç–æ–≤. –ù–∞ –≤—Ö–æ–¥ —Ç—ã –ø–æ–ª—É—á–∞–µ—à—å JSON-–æ–±—ä–µ–∫—Ç —Å–æ —Å–ª–µ–¥—É—é—â–∏–º–∏ –ø–æ–ª—è–º–∏:

{
  "Introduction": string,
  "Skin Condition Analysis": string,
  "Lifestyle Impact on Skin": string,
  "Personal Skincare Recommendations": string,
  "Improvement Forecast": string,
  "Conclusion and Support": string,
  "Web search info": string,
  "Google Search Suggestions": [string]
}

–¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî –≤—ã–≤–µ—Å—Ç–∏ –û–î–ò–ù JSON-–æ–±—ä–µ–∫—Ç —Å—Ç—Ä–æ–≥–æ –ø–æ —ç—Ç–æ–π —Å—Ö–µ–º–µ:

{
  "type": "object",
  "properties": {
    "Introduction": {
      "type": "string",
      "description": "‚ú® –í–≤–µ–¥–µ–Ω–∏–µ –∏ —Ç–µ–∫—Å—Ç –≤–≤–µ–¥–µ–Ω–∏—è –æ—Ç—á—ë—Ç–∞"
    },
    "Skin Condition Analysis": {
      "type": "string",
      "description": "üîé –ê–Ω–∞–ª–∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–æ–∂–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ñ–æ—Ç–æ"
    },
    "Lifestyle Impact on Skin": {
      "type": "string",
      "description": "üå± –í–ª–∏—è–Ω–∏–µ –æ–±—Ä–∞–∑–∞ –∂–∏–∑–Ω–∏ –Ω–∞ –∫–æ–∂—É"
    },
    "Personal Skincare Recommendations": {
      "type": "string",
      "description": "üíß –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞ —É—Ö–æ–¥–∞ –≤ –ø–æ–ª–Ω–æ–º –æ–±—ä—ë–º–µ"
    },
    "Improvement Forecast": {
      "type": "string",
      "description": "üìà –ü—Ä–æ–≥–Ω–æ–∑ —É–ª—É—á—à–µ–Ω–∏–π –ø—Ä–∏ —Å–æ–±–ª—é–¥–µ–Ω–∏–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π"
    },
    "Conclusion and Support": {
      "type": "string",
      "description": "üèÅ –ó–∞–∫–ª—é—á–µ–Ω–∏–µ –∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∞"
    }
  },
  "required": [
    "Introduction",
    "Skin Condition Analysis",
    "Lifestyle Impact on Skin",
    "Personal Skincare Recommendations",
    "Improvement Forecast",
    "Conclusion and Support"
  ],
  "additionalProperties": false
}

–ü—Ä–∞–≤–∏–ª–∞ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è:
1. –ü–æ–ª—è `Web search info` –∏ `Google Search Suggestions` —É–¥–∞–ª–∏—Ç—å; –æ–Ω–∏ –Ω–µ –¥–æ–ª–∂–Ω—ã –ø–æ–ø–∞—Å—Ç—å –≤ —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –≤—ã–≤–æ–¥.
2. –°–æ—Ö—Ä–∞–Ω—è—Ç—å –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç –≤—Å–µ—Ö –ø–æ–ª–µ–π –¥–æ—Å–ª–æ–≤–Ω–æ, –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π, –æ—Å–æ–±–µ–Ω–Ω–æ —Ä–∞–∑–¥–µ–ª —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π, –∑–∞ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ–º –ª—é–±–æ–π Markdown-—Ä–∞–∑–º–µ—Ç–∫–∏.
3. –£–¥–∞–ª–∏—Ç—å –≤—Å—é Markdown-—Ä–∞–∑–º–µ—Ç–∫—É: –∑–∞–≥–æ–ª–æ–≤–∫–∏ —É—Ä–æ–≤–Ω—è `#`, —Å–ø–∏—Å–∫–æ–≤—ã–µ –º–∞—Ä–∫–µ—Ä—ã `-`, `*`, —Ü–∏—Ñ—Ä—ã –ø–µ—Ä–µ–¥ –ø—É–Ω–∫—Ç–∞–º–∏, –ø–æ–¥—á—ë—Ä–∫–∏–≤–∞–Ω–∏—è –∏ —Ç. –ø.
4. –í –Ω–∞—á–∞–ª–µ –∫–∞–∂–¥–æ–≥–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—è –≤—Å—Ç–∞–≤–∏—Ç—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π —ç–º–æ–¥–∑–∏-–∑–∞–≥–æ–ª–æ–≤–æ–∫ (‚ú® –¥–ª—è Introduction, üîé –¥–ª—è Skin Condition Analysis, üå± –¥–ª—è Lifestyle Impact on Skin, üíß –¥–ª—è Personal Skincare Recommendations, üìà –¥–ª—è Improvement Forecast, üèÅ –¥–ª—è Conclusion and Support).
5. –£–¥–∞–ª–∏—Ç—å –ª—é–±—ã–µ —á–∏—Å–ª–∞ –≤ –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã—Ö —Å–∫–æ–±–∫–∞—Ö ‚Äî —Å—á–∏—Ç–∞—Ç—å –∏—Ö —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–º –º—É—Å–æ—Ä–æ–º.
6. –ù–µ –æ—Å—Ç–∞–≤–ª—è—Ç—å —Å—Å—ã–ª–æ–∫, —Å–∫–æ–±–æ—á–Ω—ã—Ö —Å—Å—ã–ª–æ–∫ –∏–ª–∏ –¥—Ä—É–≥–∏—Ö —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –ø–æ–º–µ—Ç–æ–∫.
7. –í—ã–≤–µ—Å—Ç–∏ —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω JSON-–æ–±—ä–µ–∫—Ç, —Å—Ç—Ä–æ–≥–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π —É–∫–∞–∑–∞–Ω–Ω–æ–π —Å—Ö–µ–º–µ.
"""

def get_summary_report(user_id: any, data):
    user_language = get_user_language(user_id=user_id)
    user_data = sync_show_progress(data)
    client = text_genai.Client(
        api_key=settings.GENAI_TOKEN,
    )

    model = "gemini-2.0-flash"
    
    # –°–æ–∑–¥–∞–µ–º —á–∞—Å—Ç–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
    parts = [
        types.Part.from_text(text=user_data),  # –í–∞—à —Ç–µ–∫—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
    ]
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
    for file_name in os.listdir(f"images/{user_id}"):
        # try:
            with open(f"images/{user_id}/{file_name}", "rb") as image_file:
                image_data = image_file.read()
                # print(len(image_data))
                parts.append(types.Part.from_bytes(data=image_data, mime_type="image/jpeg"))
        # except Exception as e:
        #     print(f"Error loading image {user_id}/{file_name}: {str(e)}")
        #     continue

    contents = [
        types.Content(
            role="user",
            parts=parts,
        ),
    ]

    tools = [
        types.Tool(google_search=types.GoogleSearch())
    ]

    generate_content_config = types.GenerateContentConfig(
        tools=tools,
        response_mime_type="text/plain",
        system_instruction=[
            types.Part.from_text(text=summary_report_text+f" write the report in {user_language}."),  # –í–∞—à–∞ —Ç–µ–∫—É—â–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è
        ],
    )

    try:
        response = []
        for chunk in client.models.generate_content_stream(
            model=model,
            contents=contents,
            config=generate_content_config,
        ):
            if chunk.text:
                response.append(chunk.text)
                # print(chunk.text, end="")

        json_data = "".join(response)

        cleaned_json = json_data.strip('```json').strip('```').strip().replace("*", "")
        print(cleaned_json)
        # –ü–∞—Ä—Å–∏–º –≤ —Å–ª–æ–≤–∞—Ä—å
        data_dict = json.loads(cleaned_json)
        
        return data_dict
    except Exception as e:
        print(f"Error generating content: {str(e)}")
        return None